
#obstacle_range: 2.5
#raytrace_range: 3.0
#footprint: [[ 0.3,  0.3], [-0.3,  0.3], [-0.3, -0.3], [ 0.3, -0.3]]
#footprint_padding: 0.03
#robot_radius: ir_of_robot
#inflation_radius: 0.55
#transform_tolerance: 1
#observation_sources: point_cloud_sensor
#point_cloud_sensor: {data_type: PointCloud2, topic: /camera/depth/points, marking: true, clearing: true}

#The maximum value of height which has to be taken as an obstacle  
max_obstacle_height: 0.60   
#This parameters set the maximum obstacle range. In this case, the robot will only look at obstacles within 2.5 meters in front of robot  
obstacle_range: 2.5 
#This parameter helps robot to clear out space in front of it upto 3.0 meters away given a sensor reading 
raytrace_range: 3.0 
#If the robot is circular, we can define the robot radius, otherwise we need to mention the robot footprint 
robot_radius: 0.45 
#footprint: [[-0.,-0.1],[-0.1,0.1], [0.1, 0.1], [0.1,-0.1]] 
#This parameter will actually inflate the obstacle up to this distance from the actual obstacle. This can be taken as a tolerance value of obstacle. The cost of map will be same as the actual obstacle up to the inflated value.  
inflation_radius: 0.50   
#This factor is used for computing cost during inflation 
cost_scaling_factor: 5   
#We can either choose map type as voxel which will give a 3D view of the world, or the other type, costmap which is a 2D view of the map. Here we are opting voxel. 
map_type: voxel 
#This is the z_origin of the map if it voxel 
origin_z: 0.0 
#z resolution of map in meters 
z_resolution: 0.2 
#No of voxel in a vertical column 
z_voxels: 2 
#This flag set whether we need map for visualization purpose 
publish_voxel_map: false 
#A list of observation source in which we get scan data and its parameters 
observation_sources: scan 
#The list of scan, which mention, data type of scan as LaserScan, marking and clearing indicate whether the laser data is used for marking and clearing costmap.  

scan: {data_type: LaserScan, topic: front_laser_scan, marking: true, clearing: true, min_obstacle_height: 0.0, max_obstacle_height: 3} 
